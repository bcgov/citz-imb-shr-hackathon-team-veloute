name: Build Veloute Frontend

on:
  push:
    branches: [ main ]
    paths:
      - "src/frontend/**"
  workflow_dispatch:
  
jobs:

  Veloute-Frontend-Build-Tag-Push:
    environment: ec1236-test-frontend
    runs-on: ubuntu-latest
    steps:
    
      # Checkout CIRMO-DPIA Github Repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Login to Openshift Silver Cluster
        uses: redhat-actions/oc-login@v1
        env:
          OPENSHIFT_USER: ${{ secrets.OPENSHIFT_SA_USERNAME }}
          OPENSHIFT_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE }}
        with: 
          openshift_server_url: ${{ secrets.OPENSHIFT_LOGIN_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_SA_PASSWORD}}
          namespace: ${{ secrets.OPENSHIFT_NAMESPACE }}
            
      # Login to BC Gov Docker Image Repository
      - name: Login to Openshift Docker
        run : |
          docker login ${{ secrets.OPENSHIFT_IMAGE_REPO_URL }} -u ${{ secrets.OPENSHIFT_SA_USERNAME }} -p ${{ secrets.OPENSHIFT_SA_PASSWORD }}
      
      # Build the DPIA API Application Image via docker-compose
      - name: Build the Docker image
        run: |
          docker-compose build veloute-frontend
      
      # TROUBLESHOOTING - view images present in github action run
      - name: Docker List Images
        run: |
          docker image ls 
      
      # Tag Docker Image built with latest
      - name: Docker Tag Version
        run: |
          docker tag citz-imb-shr-hackathon-team-veloute_veloute-frontend image-registry.apps.silver.devops.gov.bc.ca/${{ secrets.OPENSHIFT_NAMESPACE }}/veloute-frontend:latest

      # Push docker image to BC Gov Repository  
      - name: Docker Push Version
        run: |
          docker push image-registry.apps.silver.devops.gov.bc.ca/${{ secrets.OPENSHIFT_NAMESPACE }}/veloute-frontend:latest

  Veloute-Frontend-Deploy:
    runs-on: ubuntu-latest
    environment: ec1236-test-frontend
    needs: [ Veloute-Frontend-Build-Tag-Push ]
    steps:
    
      # Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Login to Openshift Silver Cluster
        uses: redhat-actions/oc-login@v1
        env:
          OPENSHIFT_USER: ${{ secrets.OPENSHIFT_SA_USERNAME }}
          OPENSHIFT_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE }}
        with: 
          openshift_server_url: ${{ secrets.OPENSHIFT_LOGIN_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_SA_PASSWORD}}
          namespace: ${{ secrets.OPENSHIFT_NAMESPACE }}

      # Use deploy helper script to process and apply DPIA API Application template into DEV namespace
      - name: Process and Apply API DeploymentConfig, Service, Route templates
        env:
          NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE }}
          APPLICATION_NAME: "veloute-frontend"
          LICENSE_PLATE: ${{ secrets.OPENSHIFT_LICENSE_PLATE }}
          ENVIRONMENT: "test"
          DC_TEMPLATE: "frontend-dc-template.yaml"
          IMAGESTREAM: "veloute-frontend"
        run: |
          ./.github/helpers/deploy.sh

  Veloute-Frontend-Healthcheck:
    runs-on: ubuntu-latest
    environment: ec1236-test-frontend
    needs: [ Veloute-Frontend-Deploy ]
    steps:
    
      # Checkout Repository
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Login to Openshift Silver Cluster
        uses: redhat-actions/oc-login@v1
        env:
          OPENSHIFT_USER: ${{ secrets.OPENSHIFT_SA_USERNAME }}
          OPENSHIFT_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE }}
        with: 
          openshift_server_url: ${{ secrets.OPENSHIFT_LOGIN_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_SA_PASSWORD}}
          namespace: ${{ secrets.OPENSHIFT_NAMESPACE }}
            
      # Use application health helper script to monitor readiness/liveness probe response post deployment  
      - name: Health Check DEV deployment
        env:
          NAMESPACE: "${{ secrets.OPENSHIFT_NAMESPACE }}"
          APPLICATION_NAME: "veloute-frontend"
        run: |
          ./.github/helpers/application-health.sh

  Veloute-Frontend-Success-Notify:
    runs-on: ubuntu-latest
    environment: ec1236-test-api
    needs: [ Veloute-Frontend-Healthcheck ]
    steps:
      - name: Message Teams Channel on Success
        run: |
          curl --location --request POST ${{ secrets.TEAMS_SUCCESS_URL }} \
          --header 'Content-Type: text/plain' \
          --data-raw '{
            "@context": "https://schema.org/extensions",
            "@type": "MessageCard",
            "themeColor": "0072C6",
            "title": "SUCCESS! Frontend Deployment ec1236-test has finished.",
          }'
